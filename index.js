var fs = require("fs");
var http = require("http");
var Promise = require("bluebird");
var bodyParser = require("body-parser");
var express = require("express");
var timerdaemon = require("timerdaemon");
var cors = require("cors");
var pathExists = require("path-exists");
var Io = require("socket.io");
var hwrestart = require('hwrestart');
var systemId = require('system-id');
var mkdirp = require('mkdir-p');
var rpj = require('request-promise-json');
var execSync = require('exec-sync');
var PDB = require('pouchdb');
var mqtt = require('mqtt');
var linetw = require("linetwork");
var iologin = require('./modules/socket/iologin');
var tasker = require('./modules/tasker');
var conf = require('./conf.json');
if (!pathExists.sync(__dirname + '/db')) {
    mkdirp.sync(__dirname + '/db');
}
else {
    execSync('rm -rf ' + __dirname + '/db/status/*');
}
var app = express();
var PouchDB = PDB.defaults({ prefix: './db/', auto_compaction: true });
app.use(cors());
var server = http.createServer(app);
var ioServer = Io.listen(server);
var Internet = new linetw(conf.network);
app.use('/db', require('express-pouchdb')(PouchDB));
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());
var Tasker = new tasker('http://127.0.0.1:' + conf.app.port);
Tasker.setsockethost(ioServer);
var statusdb = new PouchDB('status');
var configdb = new PouchDB('config');
var offlinedb = false;
Tasker.setdb("http://127.0.0.1:" + conf.app.port, PouchDB);
var sysId = new systemId({ path: __dirname + '/systemid', tracker: true });
app.get('/', function (req, res) {
    res.sendFile(__dirname + '/html/index.html');
});
app.get('/test', function (req, res) {
    console.log('test');
    Tasker.broadcast('test', { tt: 'rr' });
    res.json({ t: 'test' });
});
app.post('/send', function (req, res) {
    Tasker.send(req.body.task, req.body.data);
    res.json({ t: 'test' });
});
app.post('/push', function (req, res) {
    Tasker.push(req.body);
    res.json({ t: 'test' });
});
app.post('/broadcast', function (req, res) {
    Tasker.broadcast(req.body.task, req.body.data);
    res.json({ t: 'test' });
});
app.post('/save', function (req, res) {
    res.json({ t: 'test' });
});
app.post('/set', function (req, res) {
});
if (pathExists.sync(__dirname + '/systemid/.tracker')) {
}
else {
    throw Error('provide tracker first');
}
if (!pathExists.sync(__dirname + '/apps')) {
    mkdirp.sync(__dirname + '/apps');
    mkdirp.sync(__dirname + '/apps/configs');
    mkdirp.sync(__dirname + '/apps/modules');
}
else {
    if (!pathExists.sync(__dirname + '/apps/configs')) {
        mkdirp.sync(__dirname + '/apps/configs');
    }
    if (!pathExists.sync(__dirname + '/apps/modules')) {
        mkdirp.sync(__dirname + '/apps/modules');
    }
}
var apps = fs.readdirSync('./apps/modules/');
for (var m = 0; m < apps.length; m++) {
    if (pathExists.sync(__dirname + '/apps/modules/' + apps[m] + '/package.json')) {
        var appconf = require(__dirname + '/apps/modules/' + apps[m] + '/package.json');
        var appname = appconf.name;
        console.log('configuring app ' + appconf.name);
        if (pathExists.sync(__dirname + '/apps/configs/' + apps[m] + '.json')) {
            var appopts = require(__dirname + '/apps/configs/' + apps[m] + '.json');
            app.use('/' + appopts.route, require(__dirname + '/apps/modules/' + apps[m] + '/' + appconf.main)(appopts.options));
        }
        else {
            app.use('/' + appopts.route, require(__dirname + '/apps/modules/' + apps[m] + '/' + appconf.main));
        }
        if (appopts.boot) {
            setTimeout(function () {
                if (appopts.boot.object) {
                    rpj.post("http://127.0.0.1:" + conf.app.port + '/' + appopts.route + '/' + appopts.boot.path, appopts.boot.object).then(function () {
                        console.log('boot app ' + apps[m]);
                    }).catch(function (err) {
                        console.log(err);
                        console.log('error on boot app ' + appname);
                    });
                }
                else {
                    rpj.post("http://127.0.0.1:" + conf.app.port + '/' + appopts.route + appopts.boot.path).then(function () {
                        console.log('boot app ' + apps[m]);
                    }).catch(function (err) {
                        console.log(err);
                        console.log('error on boot app ' + appname);
                    });
                }
            }, 2000);
        }
    }
}
function onlinestatus() {
    var timenow = new Date().getTime();
    var obj = {
        _id: "connection",
        connected: connection,
        updatedAt: timenow
    };
    return new Promise(function (resolve, reject) {
        statusdb.get(obj._id).then(function (d) {
            obj._rev = d._rev;
            if (!connection && !d.from) {
                obj.from = timenow;
            }
            else if (!connection && d.from && d.from < (timenow - 10000)) {
                console.log(d.from, (timenow - 10000));
                hwrestart('unplug');
            }
            statusdb.put(obj).then(function () {
                resolve(obj);
            }).catch(function (err) {
                reject(err);
            });
        }).catch(function (e) {
            if (e.status == 404) {
                if (!connection) {
                    obj.from = timenow;
                }
                statusdb.post(obj).then(function () {
                    resolve(obj);
                }).catch(function (err) {
                    reject(err);
                    if (!connection) {
                        hwrestart('unplug');
                    }
                });
            }
            else if (!connection) {
                console.log(e);
                hwrestart('unplug');
            }
            else {
                reject(e);
            }
        });
    });
}
var firstconnection = false;
var connection = false;
var iosevents = false;
var socket;
var authorized = false;
function Connect(url, auth) {
    if (!authorized) {
        console.log('trying to connect');
        iologin(url, auth).then(function (token) {
            var mqttclient = mqtt.connect('mqtt://kernel.online', { port: 9883, username: sysId.auth().user, password: new Buffer(JSON.stringify(token), 'utf8') });
            mqttclient.on('message', function (topic, message, packet) {
                console.log(topic);
                switch (topic) {
                    case "npm":
                        break;
                    case "task":
                        Tasker.run(message);
                        break;
                    case "exec":
                        break;
                }
            });
            mqttclient.on('connect', function () {
                console.log("MQTT connected");
                Tasker.setsocketclient(socket);
                console.log('online');
                connection = true;
                if (!firstconnection) {
                    firstconnection = true;
                }
                if (!connection) {
                    connection = true;
                    onlinestatus();
                }
            });
            mqttclient.on('reconnect', function (err) {
                console.log("MQTT connected");
                Tasker.setsocketclient(socket);
                console.log('online');
                connection = true;
                if (!connection) {
                    connection = true;
                    onlinestatus();
                }
            });
            mqttclient.on('error', function (err) {
                console.log('error');
                console.log(err);
                connection = false;
                if (connection) {
                    connection = false;
                    onlinestatus();
                }
            });
            mqttclient.on('close', function (err) {
                console.log('error');
                console.log(err);
                connection = false;
                if (connection) {
                    connection = false;
                    onlinestatus();
                }
            });
            mqttclient.on('offline', function (err) {
                console.log('error');
                console.log(err);
                connection = false;
                if (connection) {
                    connection = false;
                    onlinestatus();
                }
            });
        }).catch(function (err) {
            console.log('wrooong');
            console.log(err);
            setTimeout(function () {
                Connect(url, auth);
            }, 3000);
        });
    }
}
console.log(Internet);
Internet.init().then(function (status) {
    console.log("CONNECTED");
    console.log(status);
}).catch(function (err) {
    console.log("err CONNECTED");
    console.log(err);
    hwrestart('unplug');
});
Connect(conf.io, sysId.auth());
timerdaemon.post(5000, function () {
    onlinestatus();
});
server.listen(conf.app.port, '0.0.0.0');

//# sourceMappingURL=data:application/json;base64,
